{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fileRef","React","createRef","canvasRef","sliderRefs","state","canvasW","canvasH","currentIndex","brightness","contrast","grayscale","hueRotate","invert","saturate","sepia","blur","filterText","bitmaps","timer","undefined","graphicsCtx","_this$state","setState","concat","react_default","a","createElement","style","display","flexDirection","for","background","type","id","accept","multiple","ref","onChange","bind","width","height","alignItems","justifyContent","value","min","max","onInput","onSliderUpdate","checked","onClick","onInvertChange","event","target","current","updateFilter","window","clearInterval","fileList","files","bitmapLoaders","Array","from","map","file","createImageBitmap","Promise","all","length","canvas","getContext","setInterval","doUpdate","_this$state2","ctx","save","filter","drawImage","restore","nextIndex","Component","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e8f554b.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class App extends React.Component {\n\n  constructor() {\n    super();\n    this.fileRef = React.createRef();\n    this.canvasRef = React.createRef();\n    this.sliderRefs = [ React.createRef(), React.createRef(), React.createRef(), React.createRef(), React.createRef(), React.createRef(), React.createRef() ];\n    this.state = {\n      canvasW: 0,\n      canvasH: 0,\n      currentIndex: 0,\n      brightness: 100,\n      contrast: 100,\n      grayscale: 0,\n      hueRotate: 0,\n      invert: false,\n      saturate: 100,\n      sepia: 0,\n      blur: 0,\n      filterText: ''\n    };\n    this.bitmaps = [];\n    this.timer = undefined;\n    this.graphicsCtx = undefined;\n  }\n\n  updateFilter() {\n    const { brightness, contrast, grayscale, hueRotate, invert, saturate, sepia, blur } = this.state;\n    this.setState({\n      filterText: `brightness(${brightness}%) contrast(${contrast}%) grayscale(${grayscale}%) hue-rotate(${hueRotate}deg) invert(${invert ? 100 : 0}%) saturate(${saturate}%) sepia(${sepia}%) blur(${blur}px)`\n    });\n  }\n\n  render() {\n    return (\n      <div style={{\n        display: 'flex',\n      }}>\n        <div style={{\n          display: 'flex',\n          flexDirection: 'column'\n        }}>\n          <label for='fileSelector' style={{ background: 'gray' }}>\n            ファイルを選択…\n            <input type='file' id='fileSelector' accept='image/*' multiple ref={this.fileRef} onChange={this.onChange.bind(this)} style={{ display: 'none' }} />\n          </label>\n          <button>Play</button>\n        </div>\n        <div style={{\n          background: 'black',\n          width: '100%',\n          height: '100vh',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        }}>\n          <canvas ref={this.canvasRef} width={this.state.canvasW} height={this.state.canvasH} style={{\n            width: `${this.state.canvasW}px`,\n            height: `${this.state.canvasH}px`,\n          }}/>\n        </div>\n        <div style={{\n          display: 'flex',\n          flexDirection: 'column',\n          width: '300px'\n        }}>\n          Brightness: <input type='range' value={this.state.brightness} min='0' max='400' ref={this.sliderRefs[0]} onInput={this.onSliderUpdate.bind(this)} />\n          Contrast: <input type='range' value={this.state.contrast} min='0' max='400' ref={this.sliderRefs[1]} onInput={this.onSliderUpdate.bind(this)} />\n          Grayscale: <input type='range' value={this.state.grayscale} min='0' max='100' ref={this.sliderRefs[2]} onInput={this.onSliderUpdate.bind(this)} />\n          HueRotate: <input type='range' value={this.state.hueRotate} min='0' max='360' ref={this.sliderRefs[3]} onInput={this.onSliderUpdate.bind(this)} />\n          Invert: <input type='checkbox' checked={this.state.invert} onClick={this.onInvertChange.bind(this)} />\n          Saturate: <input type='range' value={this.state.saturate} min='0' max='400' ref={this.sliderRefs[4]} onInput={this.onSliderUpdate.bind(this)} />\n          Sepia: <input type='range' value={this.state.sepia} min='0' max='100' ref={this.sliderRefs[5]} onInput={this.onSliderUpdate.bind(this)} />\n          Blur: <input type='range' value={this.state.blur} min='0' max='100' ref={this.sliderRefs[6]} onInput={this.onSliderUpdate.bind(this)} />\n        </div>\n      </div>\n    );\n  }\n\n  onSliderUpdate(event) {\n    const value = event.target.value;\n    switch (event.target) {\n      case this.sliderRefs[0].current: this.setState({ brightness: value }); break;\n      case this.sliderRefs[1].current: this.setState({ contrast: value }); break;\n      case this.sliderRefs[2].current: this.setState({ grayscale: value }); break;\n      case this.sliderRefs[3].current: this.setState({ hueRotate: value }); break;\n      case this.sliderRefs[4].current: this.setState({ saturate: value }); break;\n      case this.sliderRefs[5].current: this.setState({ sepia: value }); break;\n      case this.sliderRefs[6].current: this.setState({ blur: value }); break;\n      default: return;\n    }\n    this.updateFilter();\n  }\n\n  onInvertChange(event) {\n    this.setState({\n      invert: event.target.checked\n    });\n    this.updateFilter();\n  }\n\n  async onChange(event) {\n    if (this.timer) {\n      window.clearInterval(this.timer);\n      this.timer = undefined;\n    }\n\n    const fileList = event.target.files;\n    const bitmapLoaders = Array.from(fileList).map(file => createImageBitmap(file));\n    this.bitmaps = await Promise.all(bitmapLoaders);\n    if (this.bitmaps.length < 1) {\n      return;\n    }\n\n    const canvas = this.canvasRef.current;\n    this.graphicsCtx = canvas.getContext('2d');\n\n    const { width, height } = this.bitmaps[0];\n    this.setState({\n      canvasW: width,\n      canvasH: height,\n      currentIndex: 0\n    });\n\n    this.timer = window.setInterval(this.doUpdate.bind(this), 1000 / 15);\n  }\n\n  doUpdate() {\n    const bitmaps = this.bitmaps;\n    const { filterText, currentIndex } = this.state;\n    const ctx = this.graphicsCtx;\n    ctx.save();\n    ctx.filter = filterText;\n    ctx.drawImage(bitmaps[currentIndex], 0, 0);\n    ctx.restore();\n\n    const nextIndex = currentIndex + 1;\n    this.setState({\n      currentIndex: nextIndex < this.bitmaps.length ? nextIndex : 0\n    });\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}